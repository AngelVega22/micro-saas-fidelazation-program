// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String        @id @unique
  name         String?
  email        String        @unique
  created_at   DateTime      @default(now())
  role         Role          @default(USER)
  picture      String?
  isNewUser    Boolean       @default(true)
  isActive     Boolean       @default(false)
  enrollDate   DateTime      @default(now())
  planId       String?       @default("")
  Plan         Plan?         @relation(fields: [planId], references: [id])
  UserPrograms UserProgram[]
}

model UserProgram {
  id           String   @id @default(cuid())
  name         String
  isActive     Boolean  @default(true)
  isDeleted    Boolean  @default(false)
  isExpired    Boolean  @default(false)
  comment      String?  @db.TinyText()
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  pointsAmount Int      @default(0)
  pointValue   Int
  reward       String
  pointsGoal   Int
  Points       Points[]
  userId       String?
  programId    String
  User         User?    @relation(fields: [userId], references: [id])
  Program      Program  @relation(fields: [programId], references: [id])
}

model Program {
  id           String        @id @default(cuid())
  name         String
  description  String        @db.TinyText()
  programRules String        @db.TinyText()
  isActive     Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  startDate    DateTime
  endDate      DateTime
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  userCreate   String
  userUpdate   String?
  UserProgram  UserProgram[]
}

//TRANSACTION
model Points {
  id              String          @id @default(cuid())
  transactionType transactionType
  isUsed          Boolean         @default(false)
  points          Int             @default(0)
  isActive        Boolean         @default(true)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  userCreate      String
  userUpdate      String?
  userProgramId   String
  UserProgram     UserProgram     @relation(fields: [userProgramId], references: [id])
}

enum transactionType {
  EARN
  LOSE
}

enum Role {
  USER
  ADMIN
}

model Plan {
  id        String    @id @default(cuid())
  plan      String
  tagline   String
  price     Float
  realPrice Int
  quota     Int?
  features  Feature[]
  User      User[]
}

model Feature {
  id       String   @id @default(cuid())
  text     String
  footnote String?
  negative Boolean? @default(false)
  planId   String
  Plan     Plan     @relation(fields: [planId], references: [id])
}
